#!/bin/bash
#
# A replacement configure script for the OCaml compiler
# to generate config files to build a cross-compile opam switch
# for OpenEmbedded.
#
# Copyright (c) 2018 BAE Systems
# Author: Christopher Clark
#
# Generates these three config files for the OCaml compiler:
#   * m.h
#   * s.h
#   * Makefile
#
# Output depends on these environment variables:
#   * TRANSLATED_TARGET_ARCH
#
# -----
# Sections of the Makefile are derived from rpi-boot-ocaml
# by Daniel Buenzli [at] erratique.ch
# Copyright (c) 2015
# and reused here under the BSD 3-clause license.
# Retrieved January 2018 from:
# https://github.com/dbuenzli/rpi-boot-ocaml.git
# -----
#

#
# TODO: Constrain the HOST to x86_64 until further data
#       acquired for non-x86_64 build hosts.

# FIXME:
PREFIX="$2"
BINDIR="${PREFIX}/bin"
LIBDIR="${PREFIX}/lib/ocaml"
MANDIR="${PREFIX}/man"
OCAML_STDLIB_DIR="${LIBDIR}"

#========================================
# Write m.h
case $TRANSLATED_TARGET_ARCH in

# TODO: From 4.05, check others
x86-64)
cat >config/m.h <<EOF
#ifndef __PIC__
#  define ARCH_CODE32
#endif
#define ARCH_SIXTYFOUR
#define SIZEOF_INT 4
#define SIZEOF_LONG 8
#define SIZEOF_PTR 8
#define SIZEOF_SHORT 2
#define SIZEOF_LONGLONG 8
#define INT64_LITERAL(s) s ## LL
#undef ARCH_BIG_ENDIAN
#undef ARCH_ALIGN_DOUBLE
#undef ARCH_ALIGN_INT64
#define ASM_CFI_SUPPORTED
#define PROFINFO_WIDTH 0
#define CAML_WITH_CPLUGINS
EOF
;;

# TODO: From 4.04, check others
i386|i586|i686)
cat >config/m.h <<EOF
#undef ARCH_SIXTYFOUR
#define SIZEOF_INT 4
#define SIZEOF_LONG 4
#define SIZEOF_PTR 4
#define SIZEOF_SHORT 2
#define SIZEOF_LONGLONG 8
#undef ARCH_BIG_ENDIAN
#undef ARCH_ALIGN_DOUBLE
#undef ARCH_ALIGN_INT64
#define ASM_CFI_SUPPORTED
#define PROFINFO_WIDTH 26
#define CAML_WITH_CPLUGINS
EOF
;;

*) exit 1 ;;
esac

#========================================
# Write s.h

# One variable is dependent on the OE build environment: OCAML_STDLIB_DIR
# eg.
#define OCAML_STDLIB_DIR "/mnt/build/lxc/xtopher-oe/rootfs/home/build/vtpm/x86/poky/build/tmp/work/x86_64-linux/ocaml-native/4.05.0-r0/recipe-sysroot-native/usr/lib/ocaml"
cat >config/s.h <<EOF
#define OCAML_STDLIB_DIR "${OCAML_STDLIB_DIR}"
EOF

case $TRANSLATED_TARGET_ARCH in
x86-64)
cat >>config/s.h <<EOF
#define HAS_SECURE_GETENV
#define HAS_DUP3
#define HAS_PIPE2
#define HAS_ACCEPT4
EOF
;;
esac

# Common to both x86_64 and x86
cat >>config/s.h <<EOF
#define OCAML_OS_TYPE "Unix"
#define POSIX_SIGNALS
#define HAS_C99_FLOAT_OPS
#define HAS_GETRUSAGE
#define HAS_TIMES
#define HAS_SOCKETS
#define HAS_SOCKLEN_T
#define HAS_INET_ATON
#define HAS_IPV6
#define HAS_STDINT_H
#define HAS_UNISTD
#define HAS_OFF_T
#define HAS_DIRENT
#define HAS_REWINDDIR
#define HAS_LOCKF
#define HAS_MKFIFO
#define HAS_GETCWD
#define HAS_GETWD
#define HAS_GETPRIORITY
#define HAS_UTIME
#define HAS_UTIMES
#define HAS_DUP2
#define HAS_FCHMOD
#define HAS_TRUNCATE
#define HAS_SYS_SELECT_H
#define HAS_SELECT
#define HAS_NANOSLEEP
#define HAS_SYMLINK
#define HAS_WAITPID
#define HAS_WAIT4
#define HAS_GETGROUPS
#define HAS_SETGROUPS
#define HAS_INITGROUPS
#define HAS_TERMIOS
#define HAS_ASYNC_IO
#define HAS_SETITIMER
#define HAS_GETHOSTNAME
#define HAS_UNAME
#define HAS_GETTIMEOFDAY
#define HAS_MKTIME
#define HAS_SETSID
#define HAS_PUTENV
#define HAS_LOCALE
#define SUPPORT_DYNAMIC_LINKING
#define HAS_MMAP
#define HAS_PWRITE
#define HAS_NANOSECOND_STAT 1
#define HAS_GETHOSTBYNAME_R 6
#define HAS_GETHOSTBYADDR_R 8
#define HAS_MKSTEMP
#define HAS_NICE
#define HAS_STACK_OVERFLOW_DETECTION
#define HAS_SIGWAIT
#define HAS_HUGE_PAGES
#define HUGE_PAGE_SIZE (4 * 1024 * 1024)
EOF

#========================================
# Write Makefile

# TODO: double check these:
# TARGET
# SYSTEM
# WITH_PROFINFO
# PROFINFO_WIDTH
# BYTECCRPATH -> switch to rpath-link ? interaction with sysroot?
# NATIVECCRPATH -> switch to rpath-link ? interaction with sysroot?
# MKSHAREDLIBRPATH -> switch to rpath-link interaction with sysroot?
# HOST : use linux32 on 32-bit builds?
# MKDLL : cc or ld ?
# MKMAINDLL : cc or ld ?
# OTHERLIBRARIES=unix str num dynlink bigarray raw_spacetime_lib systhreads threads graph
# RUNTIMED=false
# PROFILING=noprof

# Possibly version-specific? Check these later:
# BYTERUN
# PROFILING
# PARTIALLD
# PACKLD
# DLLCCCOMPOPTS
# RUNTIMED
# SHARED
# AFL_INSTRUMENT
# SAFE_STRING

# Header and common paths:
cat >config/Makefile <<EOF
# Generated by alternative configure script for OpenEmbedded
CONFIGURE_ARGS=""
PREFIX=${PREFIX}
BINDIR=${BINDIR}
LIBDIR=${LIBDIR}
MANDIR=${MANDIR}
HOST=x86_64-unknown-linux-gnu
EOF

# Static arch-dependent differences:
case $TRANSLATED_TARGET_ARCH in
x86-64)
cat >>config/Makefile <<EOF
BNG_ARCH=amd64
BNG_ASM_LEVEL=1
X11_LINK=-L/usr/lib/x86_64-linux-gnu 
ARCH=amd64
SYSTEM=linux
WITH_PROFINFO=false
PROFINFO_WIDTH=0
TARGET=x86_64-unknown-linux-gnu
EOF

;;

i386|i586|i686)
cat >>config/Makefile <<EOF
BNG_ARCH=ia32
BNG_ASM_LEVEL=2
X11_LINK=-L/usr/lib/i386-linux-gnu 
ARCH=i386
SYSTEM=linux_elf
PROFINFO_WIDTH=26
TARGET=i686-unknown-linux-gnu
EOF

;;

*) exit 1 ;;
esac

# Locate ocamlrun and ocamlyacc
RUNNING_DIR=$(pwd)
CROSS_SWITCH=$(echo $RUNNING_DIR | sed 's,^.*/opam-root/\([^/]*\)/.*$,\1,')
NATIVE_SWITCH=$(echo $CROSS_SWITCH | cut -c 4-)
WORKDIR=$(echo $RUNNING_DIR | sed 's,\(^.*\)/opam-root/[^/]*/.*$,\1,')
OCAMLRUN="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${NATIVE_SWITCH}/bin/ocamlrun"
OCAMLYACC="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${NATIVE_SWITCH}/bin/ocamlyacc"
OCAMLLEX="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${NATIVE_SWITCH}/bin/ocamllex"

# Dynamic differences: handled by wrappers
# since the sysroot path changes between recipes
cat >>config/Makefile <<EOF
BYTECC=oe-opam-cc
BYTECCCOMPOPTS=
BYTECODE_C_COMPILER=oe-opam-cc -fPIC
NATIVECC=oe-opam-cc
NATIVECCCOMPOPTS=
NATIVECODE_C_COMPILER=oe-opam-cc
ASM=oe-opam-as
ASPP=oe-opam-cc -c
MKDLL=oe-opam-cc -shared
MKMAINDLL=oe-opam-cc -shared
PARTIALLD=oe-opam-ld -r
PACKLD=oe-opam-ld -r -o \\ 

CAMLRUN=${OCAMLRUN}
CAMLYACC=${OCAMLYACC}

BYTERUN=\$(BINDIR)/ocamlrun
PROFILING=noprof
DLLCCCOMPOPTS=
RUNTIMED=noruntimed
SHARED=noshared
SAFE_STRING=false

# Variables with common values
STUBLIBDIR=\$(LIBDIR)/stublibs
MANEXT=1
RANLIB=ranlib
RANLIBCMD=ranlib
ARCMD=ar
HASHBANGSCRIPTS=true
SHARPBANGSCRIPTS=true
UNIX_OR_WIN32=unix
UNIXLIB=unix
GRAPHLIB=graph
PTHREAD_LINK=-lpthread
PTHREAD_CAML_LINK=-cclib -lpthread
X11_INCLUDES=
LIBBFD_LINK=
LIBBFD_INCLUDE=
BYTECCCOMPOPTS=-Wall -fno-tree-vrp
BYTECCLINKOPTS= -Wl,-E
BYTECCLIBS= -lm  -ldl  -lpthread
BYTECCRPATH=-Wl,-rpath-link,
EXE=
SUPPORTS_SHARED_LIBRARIES=true
SHAREDCCCOMPOPTS=-fPIC
MKSHAREDLIBRPATH=-Wl,-rpath-link,
NATDYNLINKOPTS=-Wl,-E
SYSLIB=-l\$(1)
#ml let syslib x = "-l"^x;;

### How to build a static library
MKLIB=ar rc \$(1) \$(2); ranlib \$(1)
#ml let mklib out files opts =      (* "" *)
#ml   Printf.sprintf "ar rc %s %s %s; ranlib %s"
#ml                  out opts files out;;
MODEL=default
NATIVECCCOMPOPTS=-Wall -fno-tree-vrp
NATIVECCPROFOPTS=
NATIVECCLINKOPTS=
NATIVECCRPATH=-Wl,-rpath-link,
NATIVECCLIBS= -lm  -ldl
ASPPPROFFLAGS=-DPROFILING
DYNLINKOPTS= -ldl
OTHERLIBRARIES=unix str num dynlink bigarray systhreads threads
CC_PROFILE=-pg
SYSTHREAD_SUPPORT=true
IFLEXDIR=
O=o
A=a
SO=so
EXT_OBJ=.o
EXT_ASM=.s
EXT_LIB=.a
EXT_DLL=.so
EXTRALIBS=
CCOMPTYPE=cc
TOOLCHAIN=cc
NATDYNLINK=true
CMXS=cmxs
MKEXE=\$(BYTECC)
MKEXEDEBUGFLAG=-g
RUNTIMED=noruntimed
RUNTIMEI=false
#WITH_DEBUGGER=ocamldebugger
#WITH_OCAMLDOC=ocamldoc
WITH_OCAMLBUILD=ocamlbuild
ASM_CFI_SUPPORTED=true
WITH_FRAME_POINTERS=false
WITH_SPACETIME=false
LIBUNWIND_AVAILABLE=false
LIBUNWIND_INCLUDE_FLAGS=
LIBUNWIND_LINK_FLAGS=
WITH_CPLUGINS=true
WITH_FPIC=false
FLAMBDA=false
AFL_INSTRUMENT=false
MAX_TESTSUITE_DIR_RETRIES=0
EOF

# Primary Makefile:
# Replace world, world.opt and install build targets
# with versions suitable for a cross-compile build

sed -e 's/^world:$/old-world:/' -i'' Makefile
sed -e 's/^world.opt:$/old-world.opt:/' -i'' Makefile
sed -e 's/^install:$/old-install:/' -i'' Makefile

cat >>Makefile <<EOF

bare-coldstart:
	cd byterun; \$(MAKE) ld.conf libcamlrun.a libcamlrund.a
	cd stdlib; \$(MAKE) COMPILER=../boot/ocamlc all
	cd stdlib; cp \$(LIBFILES) ../boot
	ln -sf ../byterun/libcamlrun.a boot/libcamlrun.a
	ln -sf ../byterun/caml stdlib/caml

# remove compilation of ocamlyacc and ocamlrun
bare-runtime:
	cd byterun; \$(MAKE) libcamlrun.a libcamlrund.a
	ln -sf ../byterun/libcamlrun.a stdlib/libcamlrun.a

# Target ocamltools: remove compilation of objinfo as it needs
# ocamlobjinfo_helper which compiles to a C native code executable
# and thus wants a libc
bare-coreall:
	\$(MAKE) ocamlc
	cd tools; \$(MAKE) ocamldep ocamlprof ocamlcp ocamloptp ocamlmktop \
					ocamlmklib dumpobj read_cmt
	\$(MAKE) library

bare-all:
	\$(MAKE) bare-runtime
	\$(MAKE) bare-coreall
	\$(MAKE) ocaml
	cd otherlibs/unix && make unix.cmi # for bigarray
	for i in \$(OTHERLIBRARIES); do \
	  (cd otherlibs/\$\$i; \$(MAKE) all) || exit \$\$?; \
	done
	\$(MAKE) ocamlbuild.byte

bare-world:
	\$(MAKE) bare-coldstart
	\$(MAKE) bare-all

bare:
	\$(MAKE) bare-world
	\$(MAKE) opt
	\$(MAKE) ocamlbuild.native

# Fake existence of what we didn't compile so that install
# doesn't fail and use the build-os ocamllex.
bare-install:
	touch byterun/ocamlrund
	touch lex/ocamllex
	touch tools/objinfo
	touch tools/objinfo_helper
	\$(MAKE) old-install
	rm \$(INSTALL_BINDIR)/ocamlobjinfo\$(EXE) # Fake
	cp \$(CAMLYACC) \$(INSTALL_BINDIR)/ocamlyacc\$(EXE) # Use build-os
	cp ${OCAMLLEX} \$(INSTALL_BINDIR)/ocamllex\$(EXE) # Use build-os
	chmod 755 \$(INSTALL_BINDIR)/ocamllex\$(EXE) # Use build-os
	cp otherlibs/unix/unix.cmi \$(INSTALL_LIBDIR)/ # for bigarray

world:
	\$(MAKE) bare-world

world.opt:
	\$(MAKE) bare

install:
	\$(MAKE) bare-install
EOF
