#!/bin/bash
#
# Copyright (c) 2018 BAE Systems
# Author: Christopher Clark
#
# Sections of the Makefile are derived from rpi-boot-ocaml
# by Daniel Buenzli [at] erratique.ch,  Copyright (c) 2015
# and reused here under the BSD 3-clause license.
# https://github.com/dbuenzli/rpi-boot-ocaml/blob/8437fb335086194ee69937ae5289be2fc0cde278/packages/ocaml-armv7-none-eabihf.4.02.3/files/config/Makefile.in
#
#   Copyright (c) 2014 Daniel C. Bünzli.
#   All rights reserved.
#
#   Redistribution and use in source and binary forms, with or without
#   modification, are permitted provided that the following conditions
#   are met:
#
#   1. Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#
#   2. Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions and the following
#      disclaimer in the documentation and/or other materials provided
#      with the distribution.
#
#   3. Neither the name of Daniel C. Bünzli nor the names of
#      contributors may be used to endorse or promote products derived
#      from this software without specific prior written permission.
#
#   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# -----

EXCESS_ARGS=()
while [[ $# -gt 0 ]] ; do
    case "$1" in
        --primary-makefile) PRIMARY_MAKEFILE="$2"; shift 2;;
        --config-makefile)  CONFIG_MAKEFILE="$2";  shift 2;;
        --target-arch)      TARGET_ARCH="$2";      shift 2;;
        --prefix)           PREFIX="$2";           shift 2;;
        --bindir)           BINDIR="$2";           shift 2;;
        --libdir)           LIBDIR="$2";           shift 2;;
        --mandir)           MANDIR="$2";           shift 2;;

        *) EXCESS_ARGS+=("$1") ; shift ;;
    esac
done
set -- "${EXCESS_ARGS[@]}"

if [ $# != 0 ] ; then
    echo "Excess arguments were supplied : $@">&2
    exit 1
fi
if [ -z "${PRIMARY_MAKEFILE}" ] ; then
    echo "--primary-makefile required parameter is missing.">&2
    exit 1
fi
if [ -z "${CONFIG_MAKEFILE}" ] ; then
    echo "--config-makefile required parameter is missing.">&2
    exit 1
fi
if [ -z "${TARGET_ARCH}" ] ; then
    echo "--target-arch required parameter is missing.">&2
    exit 1
fi
if [ -z "${PREFIX}" ] ; then
    echo "--prefix required parameter is missing.">&2
    exit 1
fi
[ -n "${BINDIR}" ] || BINDIR="${PREFIX}/bin"
[ -n "${LIBDIR}" ] || LIBDIR="${PREFIX}/lib/ocaml"
[ -n "${MANDIR}" ] || MANDIR="${PREFIX}/man"

#---


# TODO: double check these:
# TARGET
# SYSTEM
# WITH_PROFINFO
# PROFINFO_WIDTH
# BYTECCRPATH -> switch to rpath-link ? interaction with sysroot?
# NATIVECCRPATH -> switch to rpath-link ? interaction with sysroot?
# MKSHAREDLIBRPATH -> switch to rpath-link interaction with sysroot?
# HOST : use linux32 on 32-bit builds?
# MKDLL : cc or ld ?
# MKMAINDLL : cc or ld ?
# OTHERLIBRARIES=unix str num dynlink bigarray raw_spacetime_lib systhreads threads graph
# RUNTIMED=false
# PROFILING=noprof

# Possibly version-specific? Check these later:
# BYTERUN
# PROFILING
# PARTIALLD
# PACKLD
# DLLCCCOMPOPTS
# RUNTIMED
# SHARED
# AFL_INSTRUMENT
# SAFE_STRING

# Header and common paths:
cat >"${CONFIG_MAKEFILE}" <<EOF
# Generated by alternative configure script for OpenEmbedded
CONFIGURE_ARGS=""
PREFIX=${PREFIX}
BINDIR=${BINDIR}
LIBDIR=${LIBDIR}
MANDIR=${MANDIR}
HOST=x86_64-unknown-linux-gnu
EOF

# Static arch-dependent differences:
case $TARGET_ARCH in
x86-64)
cat >>"${CONFIG_MAKEFILE}" <<EOF
BNG_ARCH=amd64
BNG_ASM_LEVEL=1
X11_LINK=-L/usr/lib/x86_64-linux-gnu 
ARCH=amd64
SYSTEM=linux
WITH_PROFINFO=false
PROFINFO_WIDTH=0
TARGET=x86_64-unknown-linux-gnu
EOF

;;

i386|i586|i686)
cat >>"${CONFIG_MAKEFILE}" <<EOF
BNG_ARCH=ia32
BNG_ASM_LEVEL=2
X11_LINK=-L/usr/lib/i386-linux-gnu 
ARCH=i386
SYSTEM=linux_elf
PROFINFO_WIDTH=26
TARGET=i686-unknown-linux-gnu
EOF

;;

# FIXME: verify this for ARM 32-bit
# TODO: aiming for cubietruck compat first, then odroid
arm)
cat >>"${CONFIG_MAKEFILE}" <<EOF
BNG_ARCH=generic
BNG_ASM_LEVEL=0
X11_LINK=-L/usr/lib/arm-linux-gnu 
ARCH=arm
SYSTEM=linux_eabi
PROFINFO_WIDTH=26
TARGET=arm-unknown-linux-gnu
EOF

;;

*) exit 1 ;;
esac

# Locate ocamlrun and ocamlyacc
RUNNING_DIR=$(pwd)
CROSS_SWITCH=$(echo $RUNNING_DIR | sed 's,^.*/opam-root/\([^/]*\)/.*$,\1,')
NATIVE_SWITCH=$(echo $CROSS_SWITCH | cut -c 4-)
OPAM32_SWITCH="nx-${NATIVE_SWITCH}"
if [ -e "${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${OPAM32_SWITCH}" ]
then
    ASSIST_SWITCH="${OPAM32_SWITCH}"
else
    ASSIST_SWITCH="${NATIVE_SWITCH}"
fi
WORKDIR=$(echo $RUNNING_DIR | sed 's,\(^.*\)/opam-root/[^/]*/.*$,\1,')
OCAMLRUN="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${ASSIST_SWITCH}/bin/ocamlrun"
OCAMLYACC="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${ASSIST_SWITCH}/bin/ocamlyacc"
OCAMLLEX="${WORKDIR}/recipe-sysroot-native/usr/share/ocaml/opam-root/${ASSIST_SWITCH}/bin/ocamllex"

# Dynamic differences: handled by wrappers
# since the sysroot path changes between recipes
cat >>"${CONFIG_MAKEFILE}" <<EOF
BYTECC=oe-opam-cc
BYTECCCOMPOPTS=
BYTECODE_C_COMPILER=oe-opam-cc -fPIC
NATIVECC=oe-opam-cc
NATIVECCCOMPOPTS=
NATIVECODE_C_COMPILER=oe-opam-cc
ASM=oe-opam-as
ASPP=oe-opam-cc -c
MKDLL=oe-opam-cc -shared
MKMAINDLL=oe-opam-cc -shared
PARTIALLD=oe-opam-ld -r
PACKLD=oe-opam-ld -r -o \\ 

CAMLRUN=${OCAMLRUN}
CAMLYACC=${OCAMLYACC}

BYTERUN=\$(BINDIR)/ocamlrun
PROFILING=noprof
DLLCCCOMPOPTS=
RUNTIMED=noruntimed
SHARED=noshared
SAFE_STRING=false

# Variables with common values
STUBLIBDIR=\$(LIBDIR)/stublibs
MANEXT=1
RANLIB=ranlib
RANLIBCMD=ranlib
ARCMD=ar
HASHBANGSCRIPTS=true
SHARPBANGSCRIPTS=true
UNIX_OR_WIN32=unix
UNIXLIB=unix
GRAPHLIB=graph
PTHREAD_LINK=-lpthread
PTHREAD_CAML_LINK=-cclib -lpthread
X11_INCLUDES=
LIBBFD_LINK=
LIBBFD_INCLUDE=
BYTECCCOMPOPTS=-Wall -fno-tree-vrp
BYTECCLINKOPTS= -Wl,-E
BYTECCLIBS= -lm  -ldl  -lpthread
BYTECCRPATH=-Wl,-rpath-link,
EXE=
SUPPORTS_SHARED_LIBRARIES=true
SHAREDCCCOMPOPTS=-fPIC
MKSHAREDLIBRPATH=-Wl,-rpath-link,
NATDYNLINKOPTS=-Wl,-E
SYSLIB=-l\$(1)
#ml let syslib x = "-l"^x;;

### How to build a static library
MKLIB=ar rc \$(1) \$(2); ranlib \$(1)
#ml let mklib out files opts =      (* "" *)
#ml   Printf.sprintf "ar rc %s %s %s; ranlib %s"
#ml                  out opts files out;;
MODEL=default
NATIVECCCOMPOPTS=-Wall -fno-tree-vrp
NATIVECCPROFOPTS=
NATIVECCLINKOPTS=
NATIVECCRPATH=-Wl,-rpath-link,
NATIVECCLIBS= -lm  -ldl
ASPPPROFFLAGS=-DPROFILING
DYNLINKOPTS= -ldl
OTHERLIBRARIES=unix str num dynlink bigarray systhreads threads
CC_PROFILE=-pg
SYSTHREAD_SUPPORT=true
IFLEXDIR=
O=o
A=a
SO=so
EXT_OBJ=.o
EXT_ASM=.s
EXT_LIB=.a
EXT_DLL=.so
EXTRALIBS=
CCOMPTYPE=cc
TOOLCHAIN=cc
NATDYNLINK=true
CMXS=cmxs
MKEXE=\$(BYTECC)
MKEXEDEBUGFLAG=-g
RUNTIMED=noruntimed
RUNTIMEI=false
#WITH_DEBUGGER=ocamldebugger
#WITH_OCAMLDOC=ocamldoc
WITH_OCAMLBUILD=ocamlbuild
ASM_CFI_SUPPORTED=true
WITH_FRAME_POINTERS=false
WITH_SPACETIME=false
LIBUNWIND_AVAILABLE=false
LIBUNWIND_INCLUDE_FLAGS=
LIBUNWIND_LINK_FLAGS=
WITH_CPLUGINS=true
WITH_FPIC=false
FLAMBDA=false
AFL_INSTRUMENT=false
MAX_TESTSUITE_DIR_RETRIES=0
EOF

# Primary Makefile:
# Replace world, world.opt and install build targets
# with versions suitable for a cross-compile build

sed -e 's/^world:$/old-world:/' -i'' Makefile
sed -e 's/^world.opt:$/old-world.opt:/' -i'' Makefile
sed -e 's/^install:$/old-install:/' -i'' Makefile

# Check the version of the (cross) switch to determine
# whether to build ocamlbuild
# FIXME: make the version check as accurate as needed
if [ "${OPAMSWITCH}" == "cx-4.02.2" ] ; then
    OPTIONAL_OCAMLBUILD_BYTE='\$(MAKE) ocamlbuild.byte'
    OPTIONAL_OCAMLBUILD_NATIVE='\$(MAKE) ocamlbuild.native'
fi

cat >>"${PRIMARY_MAKEFILE}" <<EOF

bare-coldstart:
	cd byterun; \$(MAKE) ld.conf libcamlrun.a libcamlrund.a
	cd stdlib; \$(MAKE) COMPILER=../boot/ocamlc all
	cd stdlib; cp \$(LIBFILES) ../boot
	ln -sf ../byterun/libcamlrun.a boot/libcamlrun.a
	ln -sf ../byterun/caml stdlib/caml

# remove compilation of ocamlyacc and ocamlrun
bare-runtime:
	cd byterun; \$(MAKE) libcamlrun.a libcamlrund.a
	ln -sf ../byterun/libcamlrun.a stdlib/libcamlrun.a

# Target ocamltools: remove compilation of objinfo as it needs
# ocamlobjinfo_helper which compiles to a C native code executable
# and thus wants a libc
bare-coreall:
	\$(MAKE) ocamlc
	cd tools; \$(MAKE) ocamldep ocamlprof ocamlcp ocamloptp ocamlmktop \
					ocamlmklib dumpobj read_cmt
	\$(MAKE) library

bare-all:
	\$(MAKE) bare-runtime
	\$(MAKE) bare-coreall
	\$(MAKE) ocaml
	cd otherlibs/unix && make unix.cmi # for bigarray
	for i in \$(OTHERLIBRARIES); do \
	  (cd otherlibs/\$\$i; \$(MAKE) all) || exit \$\$?; \
	done
	${OPTIONAL_OCAMLBUILD_BYTE}

bare-world:
	\$(MAKE) bare-coldstart
	\$(MAKE) bare-all

bare:
	\$(MAKE) bare-world
	\$(MAKE) opt
	\$(MAKE) compilerlibs/ocamlcommon.cmxa
	\$(MAKE) compilerlibs/ocamlbytecomp.cmxa
	\$(MAKE) compilerlibs/ocamloptcomp.cmxa
	${OPTIONAL_OCAMLBUILD_NATIVE}

# Fake existence of what we didn't compile so that install
# doesn't fail and use the build-os ocamllex.
bare-install:
	touch byterun/ocamlrund
	touch lex/ocamllex
	touch tools/objinfo
	touch tools/objinfo_helper
	touch tools/ocamlobjinfo
	\$(MAKE) old-install
	cp compilerlibs/ocamlcommon.cmxa \
	   compilerlibs/ocamlcommon.a \
	   compilerlibs/ocamlbytecomp.cmxa \
	   compilerlibs/ocamlbytecomp.a \
	   compilerlibs/ocamloptcomp.cmxa \
	   compilerlibs/ocamloptcomp.a \
	   \$(INSTALL_COMPLIBDIR)
	rm -f \$(INSTALL_BINDIR)/ocamlobjinfo\$(EXE) # Fake
	cp \$(CAMLYACC) \$(INSTALL_BINDIR)/ocamlyacc\$(EXE) # Use build-os
	cp ${OCAMLLEX} \$(INSTALL_BINDIR)/ocamllex\$(EXE) # Use build-os
	chmod 755 \$(INSTALL_BINDIR)/ocamllex\$(EXE) # Use build-os
	cp otherlibs/unix/unix.cmi \$(INSTALL_LIBDIR)/ # for bigarray
	if ! test -f \$(INSTALL_BINDIR)/ocamlc ; then \
		ln -s ocamlc.byte \$(INSTALL_BINDIR)/ocamlc ; \
    fi

world:
	\$(MAKE) bare-world

world.opt:
	\$(MAKE) bare

install:
	\$(MAKE) bare-install
EOF
